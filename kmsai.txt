Git tagging
================
This is used to place book marks on important commits
Generally it used to identfy the commits that are related to
release events

Tags are classifed into 2 types
1 Light weight tags
2 Annoted Tags

Light weight tags
======================
These tags only have a tage name
To create a light weight tag to the latest commit
git tag some_tag_name

To create a light weight tag to an older commit
git tag some_tag_name older_commit_id

To create an annoted tag to the latest commit
git tag -a "some_tag_name" -m "some msg related to the tag"

To create an annoted tag for an older commit
git tag -a "some_tag_name" -m "some msg related to the tag" older_commit_id

To see the list of all tags
git tag

To push the tags into remote github
git push --tag

To delete a tag locally
git tag -d tagname

To delete a tag from remote github
git push origin :tag_name
===================================================
Git sqaush
==============
This is the process of merging multiple commits and making
it look like a single commit.This can be done using the git rebase
command

1 Create a commit history
  a --> b --> c --> d --> e --> f
  HEAD is pointing to f commit

Note: a commit is called as the "initial commit" and it cannot be
   squashed

In the above scenario we can sqaush only a max of 5 commits

2 To squash
  git rebase -i HEAD~5
  This will open the top 5 commits in vi editor
  For which ever commits we want to perform a squash opration
  remove the word "pick" and replace it with "squash"

3 Check the commit history
  git log --online

=====================================================================
Git rebase can also rearrange the commit history order

1 Create a commit history
  a --> b --> c --> d --> e --> f
  HEAD is pointing ti f commit

2 To rearrange the commit history order
  git rebase -i HEAD~5
  Reaarange the commits in whatever order that we want

3 Check the commit history now
  git log --oneline

===================================================================Git Stash
===============
This is a section of git where we can store the files
and once files are stored in this section further of
git cannot touch those files until they are unstashed

This is generally used to store unfinished or semi finished
work and continue with some other functionality code.

1 To stash all the files present in the stagging area
  git stash 

2 To stash all the files present in the stagging area and untracked section
  git stash -u

3 To stash all the files present in the stagging area,untracked section and   also the .gitignore file
  git stash -a

4 To see the list of stashes
  git stash list

5 To unstash the lastest stash
  git stash pop

6 To unstash an older stash
  git stash pop stash@{stashno}

.gitignore is a hidden file of git which is used for storing
the name of private/secret files.Any file whose name is mentioned
in .gitignore remains unaccessable by git.But .gitignore itself
can be accesed by git,which means .gitignore moves into the stagging
area,local reposiotry and the remote git repository

To prevent this and make .gitignore hidden from git
git stash -a

=============================================================

Modifing exisiting commits
=============================
whenever we modify a file or create new files generally we create a new commit.Instead we can put the modifications in the existing commit itself rather than creating a new commit.
This can be done using git amend command

1 Create few commits in git LR
  touch f1
  git add .
  git commit -m "a"
  touch f2
  git add .
  git commit -m "b"
  touch f3
  git add .
  git commit -m "c"

2 Check the commit history
  git log --oneline

3 Modify some files or create new files
  cat > f3
  Put some data
  ctrl+d to comeout of cat

4 check status of git
  git status
  We will find a modified file

5 Send it to stagging area
  git add .

6 Commit it to local repositry as an exisiting commmit
  git commit --amend -m "c"

7 Check the commit history
  git log --oneline
  We will see that new commit is not created the changes are
  pushed into the exisiting "c" commit

Note: git amend actually creates a new commit.
The older "c" commit becomes an orphaned commit which 
cannot be see using git log

We can use "git reflog" for seeing the entire commit
history.ie active and orphaned commits

git diff
------------
this is used for finding the difference between 2 commits
or it can be used for finding the difference between
a commit and a file yet to be commited


1 To find diff between 2 commits
  git diff commit1_id commit2_id

2 To find diff between latest commit and a file
  git diff HEAD commit_id
